datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AccountStatus {
  Active
  Inactive
  Suspended
}

enum SubscriptionStatus {
  Ativa
  Atrasada
  Cancelada
}

enum PaymentStatus {
  Pending
  Paid
  Failed
}

enum CommissionStatus {
  Pendente
  Paga
  Cancelada
}

model User {
  id              String        @id @default(cuid())
  name            String
  email           String        @unique
  cpf             String        @unique
  passwordHash    String
  commissionRate  Float         @default(0.2) // Default 20%
  accountStatus   AccountStatus @default(Active)

  referrerId      String?
  referrer        User?         @relation("Referrals", fields: [referrerId], references: [id])
  referrals       User[]        @relation("Referrals")

  subscription    Subscription?
  beneficiaryCommissions Commission[]  @relation("BeneficiaryCommissions")
  payerCommissions       Commission[]  @relation("PayerCommissions")

  journey         Journey?

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Subscription {
  id               String             @id @default(cuid())
  userId           String             @unique
  status           SubscriptionStatus
  startDate        DateTime
  dueDate          Int
  cancellationDate DateTime?

  user             User               @relation(fields: [userId], references: [id])
  payments         Payment[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Payment {
  id               String        @id @default(cuid())
  subscriptionId   String
  amount           Float
  status           PaymentStatus
  gatewayPaymentId String        @unique

  subscription     Subscription  @relation(fields: [subscriptionId], references: [id])
  commission       Commission?

  createdAt        DateTime      @default(now())
}

model Commission {
  id              String           @id @default(cuid())
  beneficiaryId   String
  payerId         String
  paymentId       String           @unique
  amount          Float
  status          CommissionStatus
  generationDate  DateTime
  releaseDate     DateTime

  beneficiary     User             @relation("BeneficiaryCommissions", fields: [beneficiaryId], references: [id])
  payer           User             @relation("PayerCommissions", fields: [payerId], references: [id])
  payment         Payment          @relation(fields: [paymentId], references: [id])

  createdAt       DateTime         @default(now())
}

model Journey {
  id              String    @id @default(cuid())
  userId          String    @unique
  totalProgress   Int       @default(0)
  step1Completed  Boolean   @default(false)
  step2Completed  Boolean   @default(false)
  step3Completed  Boolean   @default(false)
  step4Completed  Boolean   @default(false)
  step5Completed  Boolean   @default(false)
  step6Completed  Boolean   @default(false)
  step7Completed  Boolean   @default(false)
  step8Completed  Boolean   @default(false)
  step9Completed  Boolean   @default(false)
  step10Completed Boolean   @default(false)

  user            User      @relation(fields: [userId], references: [id])

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
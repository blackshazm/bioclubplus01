export enum CommissionStatus {
  Pending = 'Pendente',
  Paid = 'Paga',
  Canceled = 'Cancelada',
}

export interface CommissionProps {
  id: string;
  beneficiaryId: string;
  payerId: string;
  paymentId: string;
  amount: number;
  status: CommissionStatus;
  generationDate: Date;
  releaseDate: Date;
}

export class Commission {
  private props: CommissionProps;

  private constructor(props: CommissionProps) {
    this.props = props;
  }

  public static create(props: Omit<CommissionProps, 'id' | 'status' | 'generationDate'>): Commission {
    return new Commission({
      ...props,
      id: '', // ID will be generated by the database
      status: CommissionStatus.Pending,
      generationDate: new Date(),
    });
  }

  public static hydrate(props: CommissionProps): Commission {
    return new Commission(props);
  }

  // Getter methods
  get id(): string { return this.props.id; }
  get beneficiaryId(): string { return this.props.beneficiaryId; }
  get payerId(): string { return this.props.payerId; }
  get paymentId(): string { return this.props.paymentId; }
  get amount(): number { return this.props.amount; }
  get status(): CommissionStatus { return this.props.status; }
  get generationDate(): Date { return this.props.generationDate; }
  get releaseDate(): Date { return this.props.releaseDate; }
}
export type UserAccountStatus = 'Active' | 'Inactive' | 'Suspended';

export interface UserProps {
  id: string;
  name: string;
  email: string;
  cpf: string;
  passwordHash: string;
  referrerId?: string | null;
  commissionRate: number;
  accountStatus: UserAccountStatus;
  createdAt: Date;
  updatedAt: Date;
}

export class User {
  private props: UserProps;

  private constructor(props: UserProps) {
    if (!User.isCpfValid(props.cpf)) {
      throw new Error('Invalid CPF');
    }
    this.props = props;
  }

  public static create(
    props: Omit<UserProps, 'id' | 'createdAt' | 'updatedAt'>,
  ): User {
    const now = new Date();
    return new User({
      ...props,
      id: '', // ID will be generated by the database
      createdAt: now,
      updatedAt: now,
    });
  }

  public static hydrate(props: UserProps): User {
    return new User(props);
  }

  public static isCpfValid(cpf: string): boolean {
    if (!cpf) return false;

    const cleanedCpf = cpf.replace(/[^\d]/g, '');

    if (cleanedCpf.length !== 11 || /^(\d)\1+$/.test(cleanedCpf)) {
      return false;
    }

    let sum = 0;
    let remainder;

    for (let i = 1; i <= 9; i++) {
      sum = sum + parseInt(cleanedCpf.substring(i - 1, i)) * (11 - i);
    }

    remainder = (sum * 10) % 11;
    if (remainder === 10 || remainder === 11) {
      remainder = 0;
    }
    if (remainder !== parseInt(cleanedCpf.substring(9, 10))) {
      return false;
    }

    sum = 0;
    for (let i = 1; i <= 10; i++) {
      sum = sum + parseInt(cleanedCpf.substring(i - 1, i)) * (12 - i);
    }

    remainder = (sum * 10) % 11;
    if (remainder === 10 || remainder === 11) {
      remainder = 0;
    }
    if (remainder !== parseInt(cleanedCpf.substring(10, 11))) {
      return false;
    }

    return true;
  }

  // Getter methods to access properties
  get id(): string { return this.props.id; }
  get name(): string { return this.props.name; }
  get email(): string { return this.props.email; }
  get cpf(): string { return this.props.cpf; }
  get passwordHash(): string { return this.props.passwordHash; }
  get referrerId(): string | null | undefined { return this.props.referrerId; }
  get commissionRate(): number { return this.props.commissionRate; }
  get accountStatus(): UserAccountStatus { return this.props.accountStatus; }
  get createdAt(): Date { return this.props.createdAt; }
  get updatedAt(): Date { return this.props.updatedAt; }

  public updateCommissionRate(newRate: number): void {
    this.props.commissionRate = newRate;
    this.props.updatedAt = new Date();
  }
}
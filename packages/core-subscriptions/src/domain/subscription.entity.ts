export enum SubscriptionStatus {
  Active = 'Ativa',
  Overdue = 'Atrasada',
  Canceled = 'Cancelada',
}

export interface SubscriptionProps {
  id: string;
  userId: string;
  status: SubscriptionStatus;
  startDate: Date;
  dueDate: number; // Day of the month for renewal
  cancellationDate?: Date | null;
  createdAt: Date;
  updatedAt: Date;
}

export class Subscription {
  private props: SubscriptionProps;

  private constructor(props: SubscriptionProps) {
    this.props = props;
  }

  public static create(props: Omit<SubscriptionProps, 'id' | 'status' | 'startDate' | 'createdAt' | 'updatedAt'>): Subscription {
    const now = new Date();
    return new Subscription({
      ...props,
      id: '', // ID will be generated by the database
      status: SubscriptionStatus.Active,
      startDate: now,
      createdAt: now,
      updatedAt: now,
    });
  }

  public static hydrate(props: SubscriptionProps): Subscription {
    return new Subscription(props);
  }

  public cancel(): void {
    if (this.props.status === SubscriptionStatus.Canceled) {
      throw new Error('Subscription is already canceled.');
    }
    this.props.status = SubscriptionStatus.Canceled;
    this.props.cancellationDate = new Date();
    this.props.updatedAt = new Date();
  }

  public markAsOverdue(): void {
    if (this.props.status === SubscriptionStatus.Canceled) {
      throw new Error('Cannot mark a canceled subscription as overdue.');
    }
    this.props.status = SubscriptionStatus.Overdue;
    this.props.updatedAt = new Date();
  }

  // Getter methods
  get id(): string { return this.props.id; }
  get userId(): string { return this.props.userId; }
  get status(): SubscriptionStatus { return this.props.status; }
  get startDate(): Date { return this.props.startDate; }
  get dueDate(): number { return this.props.dueDate; }
  get cancellationDate(): Date | null | undefined { return this.props.cancellationDate; }
  get createdAt(): Date { return this.props.createdAt; }
  get updatedAt(): Date { return this.props.updatedAt; }
}